# What protocol to use when performing git operations. Supported values: ssh, https
git_protocol: https
# What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
editor:
# When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
prompt: enabled
# A pager program to send command output to. Example value: less
pager:
# Aliases allow you to create nicknames for gh commands
aliases:
    co: pr checkout
    repos: |-
        !gh api --paginate graphql -f owner="$1" -f query='
          query($owner: String!, $per_page: Int = 100, $endCursor: String) {
            repositoryOwner(login: $owner) {
              repositories(first: $per_page, after: $endCursor, ownerAffiliations: OWNER) {
                nodes { nameWithOwner }
                pageInfo { hasNextPage endCursor }
              }
            }
          }
        ' | jq -r '.data.repositoryOwner.repositories.nodes[].nameWithOwner' | sort
    action: |-
      !(case $1 in
        get)
          jq_filter=$([ "$2" ] && echo "map(. | select(.name == \"$2\")) | first" || echo 'first')
          res=$(gh api /repos/:owner/:repo/actions/runs | jq -r ".workflow_runs | $jq_filter")
          url=$(echo $res | jq -r '.html_url')
          status=$(echo $res | jq -r '.status')
          name=$(echo $res | jq -r '.name')
          id=$(echo $res | jq -r '.id')
          created=$(echo $res | jq -r '.created_at' | xargs date '+%A %b %d @ %H:%m' --date)
          echo '\e[1;34m'$name'\e[0m' \($url\)
          echo '\e[1;34m'$id'\e[0m'
          echo '\t'Started: '\e[1;33m'$created'\e[0m'
          case $status in
            completed)
              echo '\t'Status: '\e[1;32m'$status '\e[0m'\('\e[1;33m'$(echo $res | jq -r '.conclusion')'\e[0m'\)'\e[0m'
              echo '\t'Completed: '\e[1;32m'$(echo $res | jq -r '.updated_at' | xargs date '+%A %b %d @ %H:%m' --date)'\e[0m'
              ;;

            waiting)
              echo '\t'Waiting...
              ;;
          esac
          ;;

        list)
          gh api /repos/:owner/:repo/actions/workflows | jq -c ".workflows | map({ name: .name }) | .[]" | while read i; do
              echo $i | jq -r '.name'
            done
          ;;

        *)
          echo The following commands are supported from '\e[1;31m'gh action'\e[0m':
          echo '\t\e[1;32m'get'\e[0m' '\e[1;33m?workflow name\e[0m'
          echo '\t\t'Returns info of the most recent Action run. If '\e[1;33m'workflow name'\e[0m' is provided, it will return the most recent run for that workflow

          echo '\t\e[1;32m'list'\e[0m'
          echo '\t\t'Returns the names of all workflows for the repo
          ;;
        esac)

    deploy: |-
      !(case $1 in
        get)
          if [ -z "$2" ]
          then
            read -p 'Run ID: ' runId
          else
            runId=$2
          fi
          res=$(gh api /repos/:owner/:repo/actions/runs/$runId/pending_deployments --jq "map({ id: .environment.id, url: .environment.url, name: .environment.name, reviewers: .reviewers | map({ type: .type, name: (if .type == \"Team\" then .reviewer.name else .reviewer.login end) }) }) | first")
          echo '\e[1;34m'Deployment '\e[1;32m'$(echo $res | jq -r '.id') '\e[1;34m'pending to '\e[1;32m'$(echo $res | jq -r '.name')'\e[0m'
          echo '\t'Approvers: $(echo $res | jq -r '.reviewers | map(.name)')
          echo '\t'$(echo $res | jq -r '.url')
        ;;

        approve)
        if [ -z "$2" ]
        then
          read -p 'Run ID: ' runId
        else
            runId=$2
        fi
        if [ -z "$3" ]
        then
          read -p 'Environment ID: ' envId
        else
            envId=$3
        fi
        if [ -z "$4" ]
        then
          read -p 'Comment: ' comment
        else
            comment=$4
        fi

          res=$(echo "{\"environment_ids\":[$envId],\"state\":\"approved\",\"comment\":\"$comment\"}" | gh api --method POST /repos/:owner/:repo/actions/runs/$runId/pending_deployments --input -)
          echo "Deployment approved"
        ;;
      esac)